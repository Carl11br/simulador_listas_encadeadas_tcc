{"ast":null,"code":"import _slicedToArray from \"/home/carloslm/Documents/GitHub/simulador_de_listas_encadeadas/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/carloslm/Documents/GitHub/simulador_de_listas_encadeadas/src/components/CodePanel/CodePanel.jsx\";\nimport styles from './CodePanel.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { SimpleLinkedList, DoubleLinkedList } from './Structs/Structs';\nvar linkedLists = {\n  simpleLinkedList: [{\n    psdeudoCodigo: 'Criar um novo nó',\n    código: 'int *novoElemento = (int *)malloc(sizeof(int));'\n  }, {\n    psdeudoCodigo: 'Atribuir o novo valor ao novo elemento',\n    código: 'novoElemento->valor = novoValor;'\n  },\n  // inserção no inicio;\n  {\n    psdeudoCodigo: 'inserir o novo elemento no inicio da lista',\n    código: 'novoElemento->prox = listaInicial;<br>listaInicial = novoElemento;'\n  },\n  //inserção no final\n  {\n    psdeudoCodigo: 'Achar o final da lista e inserir o novo elemento',\n    código: 'lista *aux = listaInicial;<br>while (aux->prox != NULL) {<br>aux = aux->prox;<br>}<br>aux->prox = novoElemento;<br>novoElemento->prox = NULL;'\n  }]\n};\nfunction CodePanel(_ref) {\n  var _this = this;\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    code = _ref.code,\n    line = _ref.line,\n    listType = _ref.listType,\n    typeOfIsert = _ref.typeOfIsert,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 1000 : _ref$delay;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentRunningIndex = _useState2[0],\n    setCurrentRunningIndex = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    codeToRun = _useState4[0],\n    setCodeToRun = _useState4[1];\n  useEffect(function () {\n    setCurrentRunningIndex(line || []);\n    console.log('line', line);\n  }, [line]);\n  useEffect(function () {\n    setCodeToRun(code || []);\n  }, [code]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(className, \" \").concat(styles.codePanel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(styles.container, \" \").concat(styles.blueBorder),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"C\\xF3digo sendo Executado\"), /*#__PURE__*/React.createElement(\"pre\", {\n    className: styles.codebox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, codeToRun.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        width: '100%',\n        backgroundColor: currentRunningIndex === index ? 'yellow' : ''\n      },\n      key: \"line-\".concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, item);\n  }))));\n}\nexport default CodePanel;","map":{"version":3,"names":["styles","React","useState","useEffect","SimpleLinkedList","DoubleLinkedList","linkedLists","simpleLinkedList","psdeudoCodigo","código","CodePanel","className","code","line","listType","typeOfIsert","delay","currentRunningIndex","setCurrentRunningIndex","codeToRun","setCodeToRun","console","log","codePanel","container","blueBorder","codebox","map","item","index","width","backgroundColor"],"sources":["/home/carloslm/Documents/GitHub/simulador_de_listas_encadeadas/src/components/CodePanel/CodePanel.jsx"],"sourcesContent":["import styles from './CodePanel.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { SimpleLinkedList, DoubleLinkedList } from './Structs/Structs';\n\nconst linkedLists = {\n  simpleLinkedList: [\n    {\n      psdeudoCodigo: 'Criar um novo nó',\n      código: 'int *novoElemento = (int *)malloc(sizeof(int));',\n    },\n    {\n      psdeudoCodigo: 'Atribuir o novo valor ao novo elemento',\n      código: 'novoElemento->valor = novoValor;',\n    },\n    // inserção no inicio;\n    {\n      psdeudoCodigo: 'inserir o novo elemento no inicio da lista',\n      código:\n        'novoElemento->prox = listaInicial;<br>listaInicial = novoElemento;',\n    },\n    //inserção no final\n    {\n      psdeudoCodigo: 'Achar o final da lista e inserir o novo elemento',\n      código:\n        'lista *aux = listaInicial;<br>while (aux->prox != NULL) {<br>aux = aux->prox;<br>}<br>aux->prox = novoElemento;<br>novoElemento->prox = NULL;',\n    },\n  ],\n};\n\nfunction CodePanel({\n  className = '',\n  code,\n  line,\n  listType,\n  typeOfIsert,\n  delay = 1000,\n}) {\n  const [currentRunningIndex, setCurrentRunningIndex] = useState([]);\n  const [codeToRun, setCodeToRun] = useState([]);\n\n  useEffect(() => {\n    setCurrentRunningIndex(line || []);\n    console.log('line', line);\n  }, [line]);\n\n  useEffect(() => {\n    setCodeToRun(code || []);\n  }, [code]);\n\n  return (\n    <div className={`${className} ${styles.codePanel}`}>\n      <div className={`${styles.container} ${styles.blueBorder}`}>\n        <h5>Código sendo Executado</h5>\n        <pre className={styles.codebox}>\n          {codeToRun.map((item, index) => {\n            return (\n              <p\n                style={{\n                  width: '100%',\n                  backgroundColor:\n                    currentRunningIndex === index ? 'yellow' : '',\n                }}\n                key={`line-${index}`}\n              >\n                {item}\n              </p>\n            );\n          })}\n        </pre>\n      </div>\n    </div>\n  );\n}\n\nexport default CodePanel;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,mBAAmB;AAEtE,IAAMC,WAAW,GAAG;EAClBC,gBAAgB,EAAE,CAChB;IACEC,aAAa,EAAE,kBAAkB;IACjCC,MAAM,EAAE;EACV,CAAC,EACD;IACED,aAAa,EAAE,wCAAwC;IACvDC,MAAM,EAAE;EACV,CAAC;EACD;EACA;IACED,aAAa,EAAE,4CAA4C;IAC3DC,MAAM,EACJ;EACJ,CAAC;EACD;EACA;IACED,aAAa,EAAE,kDAAkD;IACjEC,MAAM,EACJ;EACJ,CAAC;AAEL,CAAC;AAED,SAASC,SAAS,OAOf;EAAA;EAAA,0BANDC,SAAS;IAATA,SAAS,+BAAG,EAAE;IACdC,IAAI,QAAJA,IAAI;IACJC,IAAI,QAAJA,IAAI;IACJC,QAAQ,QAARA,QAAQ;IACRC,WAAW,QAAXA,WAAW;IAAA,kBACXC,KAAK;IAALA,KAAK,2BAAG,IAAI;EAAA,gBAE0Cd,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3De,mBAAmB;IAAEC,sBAAsB;EAAA,iBAChBhB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAvCiB,SAAS;IAAEC,YAAY;EAE9BjB,SAAS,CAAC,YAAM;IACde,sBAAsB,CAACL,IAAI,IAAI,EAAE,CAAC;IAClCQ,OAAO,CAACC,GAAG,CAAC,MAAM,EAAET,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,YAAM;IACdiB,YAAY,CAACR,IAAI,IAAI,EAAE,CAAC;EAC1B,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBACE;IAAK,SAAS,YAAKD,SAAS,cAAIX,MAAM,CAACuB,SAAS,CAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACjD;IAAK,SAAS,YAAKvB,MAAM,CAACwB,SAAS,cAAIxB,MAAM,CAACyB,UAAU,CAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACzD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,2BAAsB,CAAK,eAC/B;IAAK,SAAS,EAAEzB,MAAM,CAAC0B,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC5BP,SAAS,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK,EAAK;IAC9B,oBACE;MACE,KAAK,EAAE;QACLC,KAAK,EAAE,MAAM;QACbC,eAAe,EACbd,mBAAmB,KAAKY,KAAK,GAAG,QAAQ,GAAG;MAC/C,CAAE;MACF,GAAG,iBAAUA,KAAK,CAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEpBD,IAAI,CACH;EAER,CAAC,CAAC,CACE,CACF,CACF;AAEV;AAEA,eAAelB,SAAS"},"metadata":{},"sourceType":"module"}