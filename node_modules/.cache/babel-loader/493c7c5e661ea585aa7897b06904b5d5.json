{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/home/carloslm/Documents/GitHub/simulador_de_listas_encadeadas/src/components/CodeBuilderModal/CodeBuilderModal.jsx\";\nimport React from 'react';\nimport { useRef } from 'react';\nimport Modal from '../Modal/Modal';\nimport CodeWithGaps from '../CodeWithGaps/CodeWithGaps';\nvar CodeBuilderModal = function CodeBuilderModal(_ref) {\n  var isOpen = _ref.isOpen,\n    onClose = _ref.onClose,\n    _ref$functionType = _ref.functionType,\n    functionType = _ref$functionType === void 0 ? 'insertStart' : _ref$functionType,\n    _ref$listType = _ref.listType,\n    listType = _ref$listType === void 0 ? 'simple' : _ref$listType;\n  var constraintsRef = useRef(null);\n  var shuffleArray = function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n  var functionOptions = {\n    insertStart: {\n      code: {\n        simple: \"void inserirInicio(int valor, LISTA **listaInicio) {\\n  LISTA *novoDado = (LISTA*)malloc(sizeof(LISTA));\\n  novoDado->valor = valor;\\n  novoDado->prox = *listaInicio;\\n  *listaInicio = *novoDado;\\n}\"\n      },\n      gaps: {\n        simple: ['malloc', \"novoDado->valor\", 'sizeof', 'realloc', 'listaInicio']\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    width: \"80%\",\n    height: \"80%\",\n    title: 'Construa seu código!',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container h-100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row h-100\",\n    ref: constraintsRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 h-100\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CodeWithGaps, {\n    code: functionOptions[functionType].code[listType],\n    gaps: shuffleArray(functionOptions[functionType].gaps[listType]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mt-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 text-end\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Executar\")))));\n};\nexport default CodeBuilderModal;","map":{"version":3,"names":["React","useRef","Modal","CodeWithGaps","CodeBuilderModal","isOpen","onClose","functionType","listType","constraintsRef","shuffleArray","array","i","length","j","Math","floor","random","temp","functionOptions","insertStart","code","simple","gaps"],"sources":["/home/carloslm/Documents/GitHub/simulador_de_listas_encadeadas/src/components/CodeBuilderModal/CodeBuilderModal.jsx"],"sourcesContent":["import React from 'react';\nimport { useRef } from 'react';\nimport Modal from '../Modal/Modal';\n\nimport CodeWithGaps from '../CodeWithGaps/CodeWithGaps';\nconst CodeBuilderModal = ({\n  isOpen,\n  onClose,\n  functionType = 'insertStart',\n  listType = 'simple',\n}) => {\n  const constraintsRef = useRef(null);\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  const functionOptions = {\n    insertStart: {\n      code: {\n        simple: `void inserirInicio(int valor, LISTA **listaInicio) {\n  LISTA *novoDado = (LISTA*)malloc(sizeof(LISTA));\n  novoDado->valor = valor;\n  novoDado->prox = *listaInicio;\n  *listaInicio = *novoDado;\n}`,\n      },\n      gaps: {\n        simple: [\n          'malloc',\n          `novoDado->valor`,\n          'sizeof',\n          'realloc',\n          'listaInicio',\n        ],\n      },\n    },\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      width=\"80%\"\n      height=\"80%\"\n      title={'Construa seu código!'}\n    >\n      <div className=\"container h-100\">\n        <div className=\"row h-100\" ref={constraintsRef}>\n          <div className=\"col-12 h-100\">\n            <CodeWithGaps\n              code={functionOptions[functionType].code[listType]}\n              gaps={shuffleArray(functionOptions[functionType].gaps[listType])}\n            />\n          </div>\n        </div>\n        <div className=\"row mt-4\">\n          <div className=\"col-12 text-end\">\n            <button className=\"btn btn-success\">Executar</button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default CodeBuilderModal;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,OAAO;AAC9B,OAAOC,KAAK,MAAM,gBAAgB;AAElC,OAAOC,YAAY,MAAM,8BAA8B;AACvD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,OAKhB;EAAA,IAJJC,MAAM,QAANA,MAAM;IACNC,OAAO,QAAPA,OAAO;IAAA,yBACPC,YAAY;IAAZA,YAAY,kCAAG,aAAa;IAAA,qBAC5BC,QAAQ;IAARA,QAAQ,8BAAG,QAAQ;EAEnB,IAAMC,cAAc,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEnC,IAAMS,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;IAC9B,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,IAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,IAAMM,IAAI,GAAGP,KAAK,CAACC,CAAC,CAAC;MACrBD,KAAK,CAACC,CAAC,CAAC,GAAGD,KAAK,CAACG,CAAC,CAAC;MACnBH,KAAK,CAACG,CAAC,CAAC,GAAGI,IAAI;IACjB;IACA,OAAOP,KAAK;EACd,CAAC;EAED,IAAMQ,eAAe,GAAG;IACtBC,WAAW,EAAE;MACXC,IAAI,EAAE;QACJC,MAAM;MAMR,CAAC;MACDC,IAAI,EAAE;QACJD,MAAM,EAAE,CACN,QAAQ,qBAER,QAAQ,EACR,SAAS,EACT,aAAa;MAEjB;IACF;EACF,CAAC;EAED,oBACE,oBAAC,KAAK;IACJ,MAAM,EAAEjB,MAAO;IACf,OAAO,EAAEC,OAAQ;IACjB,KAAK,EAAC,KAAK;IACX,MAAM,EAAC,KAAK;IACZ,KAAK,EAAE,sBAAuB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAE9B;IAAK,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAC9B;IAAK,SAAS,EAAC,WAAW;IAAC,GAAG,EAAEG,cAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAC7C;IAAK,SAAS,EAAC,cAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAC3B,oBAAC,YAAY;IACX,IAAI,EAAEU,eAAe,CAACZ,YAAY,CAAC,CAACc,IAAI,CAACb,QAAQ,CAAE;IACnD,IAAI,EAAEE,YAAY,CAACS,eAAe,CAACZ,YAAY,CAAC,CAACgB,IAAI,CAACf,QAAQ,CAAC,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACjE,CACE,CACF,eACN;IAAK,SAAS,EAAC,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACvB;IAAK,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAC9B;IAAQ,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,UAAQ,CAAS,CACjD,CACF,CACF,CACA;AAEZ,CAAC;AAED,eAAeJ,gBAAgB"},"metadata":{},"sourceType":"module"}